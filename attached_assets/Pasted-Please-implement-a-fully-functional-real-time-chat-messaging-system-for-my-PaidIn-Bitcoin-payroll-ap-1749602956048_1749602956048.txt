Please implement a fully functional real-time chat/messaging system for my PaidIn Bitcoin payroll application. I already have the UI components built in messages-page.tsx and admin-messages-page.tsx, but they currently use mock/static data.

What I need you to implement:

Database Schema (extend existing Drizzle schema in shared/schema.ts):

conversations table (id, participants, title, type, created_at, updated_at)
messages table (id, conversation_id, sender_id, content, message_type, created_at, read_at)
conversation_participants table (conversation_id, user_id, joined_at, last_read_at)
Backend API Routes (add to server/routes.ts):

GET /api/conversations - fetch user's conversations
POST /api/conversations - create new conversation
GET /api/conversations/:id/messages - fetch messages for a conversation
POST /api/conversations/:id/messages - send new message
PATCH /api/messages/:id/read - mark message as read
POST /api/conversations/broadcast - admin broadcast to all employees
WebSocket Integration:

Set up Socket.io server for real-time messaging
Handle real-time message delivery and read receipts
Support for typing indicators
Online/offline status updates
Frontend Updates:

Replace mock data with real API calls using React Query
Integrate WebSocket client for real-time updates
Add proper message sending, receiving, and read status
Implement conversation creation and management
Add admin broadcast functionality
Storage Layer (extend server/storage.ts):

Functions for CRUD operations on conversations and messages
Message pagination and search functionality
Conversation participant management
Technical Requirements:

Use existing authentication system (user roles: admin, employee)
Maintain current UI/UX design patterns
Use Drizzle ORM with PostgreSQL
Implement proper error handling and validation
Add proper TypeScript types
Ensure messages are persisted in database
Support for both individual and group conversations
Admin ability to message all employees (broadcast)
Current Tech Stack:

Backend: Express.js with TypeScript
Frontend: React with TypeScript, TanStack Query
Database: PostgreSQL with Drizzle ORM
Authentication: Passport.js sessions
UI: Tailwind CSS with shadcn/ui components
Please provide the complete implementation including all database migrations, API endpoints, WebSocket setup, and frontend integration. Make sure to handle edge cases like offline users, message delivery confirmation, and proper error states.